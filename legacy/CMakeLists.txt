
if (NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Release CACHE STRING "CMake build type" FORCE)
endif ()
string(TOUPPER "${CMAKE_BUILD_TYPE}" CMAKE_BUILD_TYPE_UPPER)
if (CMAKE_BUILD_TYPE_UPPER MATCHES DEBUG)
  set(DISTCONV_DEBUG TRUE)
endif ()

option(H2_ENABLE_P2P
  "Enable use of P2P in Distconv"
  ON)

set(DISTCONV_HAS_CUDA ${CUDAToolkit_FOUND})
if (CUDAToolkit_FOUND)
  set(DISTCONV_HAS_CUDA ${CUDAToolkit_FOUND})
  set(DISTCONV_CUDA_VERSION_MAJOR ${CUDAToolkit_VERSION_MAJOR})
  set(DISTCONV_CUDA_VERSION_MINOR ${CUDAToolkit_VERSION_MINOR})
  set(DISTCONV_HAS_CUDNN ${cuDNN_FOUND})
  set(DISTCONV_HAS_P2P ${H2_ENABLE_P2P})
  set(DISTCONV_HAS_NVSHMEM ${NVSHMEM_FOUND})
endif ()

option(DISTCONV_OPTIMIZE_FIND_DESTINATION
  "Enable optimization of find_destination."
  ON)

configure_file(
  "${CONFIG_FILE_DIR}/distconv_config.hpp.in"
  "${CMAKE_GENERATED_INCLUDE_DIRECTORY}/distconv_config.hpp"
  @ONLY)

add_subdirectory(include)
add_subdirectory(src)
add_subdirectory(tests)
# FIXME TRB
#add_subdirectory(benchmarks)

install(
  TARGETS distconv
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
  )

install(
  DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/include/distconv"
  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
  FILES_MATCHING PATTERN "*.h" PATTERN "*.hpp"
  )

if (DISTCONV_HAS_P2P)
  install(
    DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/include/p2p"
    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
    FILES_MATCHING PATTERN "*.h" PATTERN "*.hpp"
    )
endif ()

install(
  FILES "${CMAKE_GENERATED_INCLUDE_DIRECTORY}/distconv_config.hpp"
  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
  )

add_library(H2DistConv INTERFACE)
target_link_libraries(H2DistConv INTERFACE distconv)

install(TARGETS H2DistConv distconv
  EXPORT ${PROJECT_NAME}Targets
  COMPONENT DISTCONV
  )

set(H2_LIBRARIES
  H2DistConv
  "${H2_LIBRARIES}"
  PARENT_SCOPE)
