################################################################################
## Copyright 2019-2020 Lawrence Livermore National Security, LLC and other
## DiHydrogen Project Developers. See the top-level LICENSE file for details.
##
## SPDX-License-Identifier: Apache-2.0
################################################################################

include("${CMAKE_CURRENT_LIST_DIR}/DiHydrogenConfigVersion.cmake")

list(APPEND CMAKE_MODULE_PATH
  "${CMAKE_CURRENT_LIST_DIR}"
  "${CMAKE_CURRENT_LIST_DIR}/modules"
  "@EXTRA_CMAKE_MODULE_DIR@")

set(H2_VERSION ${PACKAGE_VERSION})

# Verify the dependencies of H2
include(CMakeFindDependencyMacro)

set(H2_HAS_OPENMP @H2_HAS_OPENMP@)
set(H2_HAS_HALF @H2_HAS_HALF@)
set(H2_HAS_CUDA @H2_HAS_CUDA@)
set(H2_HAS_HIP_ROCM @H2_HAS_HIP_ROCM@)
set(H2_DISTCONV_HAS_P2P @P2P_FOUND@)
set(H2_DISTCONV_HAS_NVSHMEM @NVSHMEM_FOUND@)

set(_H2_HAVE_ALUMINUM @H2_HAVE_ALUMINUM@)
set(_H2_HAVE_NCCL2 @H2_HAVE_NCCL2@)
set(_H2_HAVE_AL_MPI_CUDA @H2_HAVE_AL_MPI_CUDA@)
set(_H2_HAVE_AL_HOST_XFER @H2_HAVE_AL_HOST_XFER@)
if (_H2_HAVE_ALUMINUM)
  set(_BUILD_AL_DIR "@Aluminum_DIR@")
  set(_MIN_AL_VERSION "@H2_MINIMUM_ALUMINUM_VERSION@")
  find_package(Aluminum ${_MIN_AL_VERSION} NO_MODULE QUIET
    HINTS "${_BUILD_AL_DIR}"
    NO_DEFAULT_PATH)
  find_package(Aluminum ${_MIN_AL_VERSION} NO_MODULE QUIET
    HINTS ${Aluminum_DIR} ${ALUMINUM_DIR} ${AL_DIR}
    $ENV{Aluminum_DIR} $ENV{ALUMINUM_DIR} $ENV{AL_DIR}
    PATH_SUFFIXES lib64/cmake/aluminum lib/cmake/aluminum
    NO_DEFAULT_PATH)
  if (NOT Aluminum_FOUND)
    find_package(Aluminum ${_MIN_AL_VERSION} NO_MODULE REQUIRED)
  endif ()

  if (_H2_HAVE_NCCL2 AND NOT AL_HAS_NCCL)
    message(FATAL_ERROR
      "Hydrogen expects NCCL2 support "
      "but Aluminum does not have NCCL2 support.")
  endif ()
  if (_H2_HAVE_AL_HOST_XFER AND NOT AL_HAS_HOST_TRANSFER)
    message(FATAL_ERROR
      "Hydrogen expects HostTransfer support "
      "but Aluminum does not have HostTransfer support.")
  endif ()
  if (_H2_HAVE_AL_MPI_CUDA AND NOT AL_HAS_MPI_CUDA)
    message(FATAL_ERROR
      "Hydrogen expects MPI-CUDA support "
      "but Aluminum does not have MPI-CUDA support.")
  endif ()
endif (_H2_HAVE_ALUMINUM)

find_dependency(BLASImpl)
find_dependency(MPI)

if (H2_HAS_OPENMP)
  find_dependency(OpenMP)
endif ()

if (H2_HAS_HALF)
  find_dependency(Half)
endif ()

if (H2_HAS_CUDA)
  enable_language(CUDA)
  include(SetupCUDAToolkit)
  # Hack around a dependency naming issue in the Hydrogen/LBANN
  # stack. This will be cleaned up as DiHydrogen usage stabilizes.
  if (NOT TARGET cuda::CUB)
    if (CUB_FOUND AND TARGET cuda::cub)
      add_library(cuda::CUB INTERFACE IMPORTED)
      target_link_libraries(cuda::CUB INTERFACE cuda::cub)
    else ()
      find_dependency(CUB)
    endif ()
  endif ()
  if (NOT TARGET cuda::cuDNN)
    if (cuDNN_FOUND AND TARGET cuda::cudnn)
      add_library(cuda::cuDNN INTERFACE IMPORTED)
      target_link_libraries(cuda::cuDNN INTERFACE cuda::cudnn)
    else ()
      find_dependency(cuDNN)
    endif ()
  endif ()
  if (H2_DISTCONV_HAS_P2P)
    find_dependency(P2P)
  endif ()
  if (H2_DISTCONV_HAS_NVSHMEM)
    find_dependency(NVSHMEM)
  endif ()
endif ()

if (H2_HAS_HIP_ROCM)
  message(FATAL_ERROR "This should not be possible.")
endif ()

@PACKAGE_INIT@

# Now actually import the Hydrogen target
set(_TMP_INCLUDE_DIRS "@PACKAGE_INCLUDE_INSTALL_DIRS@")
foreach (_DIR ${_TMP_INCLUDE_DIRS})
  set_and_check(_INCLUDE_DIR "${_DIR}")
  list(APPEND HYDROGEN_INCLUDE_DIRS "${_INCLUDE_DIR}")
endforeach (_DIR "${_TMP_INCLUDE_DIRS}")

set(_TMP_LIBRARY_DIRS "@PACKAGE_LIB_INSTALL_DIR@")
foreach (_DIR ${_TMP_LIBRARY_DIRS})
  set_and_check(_LIBRARY_DIR "${_DIR}")
  list(APPEND HYDROGEN_LIBRARY_DIRS "${_LIBRARY_DIR}")
endforeach (_DIR ${_TMP_LIBRARY_DIRS})

set(_H2_LIBRARIES @H2_LIBRARIES@)
if (NOT TARGET H2::H2)
  include(${CMAKE_CURRENT_LIST_DIR}/DiHydrogenTargets.cmake)

  add_library(H2::H2 IMPORTED INTERFACE)
  foreach (lib IN LISTS _H2_LIBRARIES)
    target_link_libraries(H2::H2 INTERFACE H2::${lib})
    string(SUBSTRING "${lib}" 2 -1 _COMP_NAME)
    set(DiHydrogen_${_COMP_NAME}_FOUND TRUE)
    list(APPEND _FOUND_COMPONENTS "${_COMP_NAME}")
  endforeach ()
  list(SORT _FOUND_COMPONENTS)
  message(STATUS "Found DiHydrogen components: ${_FOUND_COMPONENTS}")
endif (NOT TARGET H2::H2)

check_required_components(DiHydrogen)
set(H2_LIBRARIES H2::H2)
